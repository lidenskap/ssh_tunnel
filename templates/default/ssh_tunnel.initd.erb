#!/bin/sh

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME='<%= @id %>'
DESC="SSH Tunnel"

PIDFILE=/var/run/$NAME.pid

# connection params
SSH_HOST='<%= @ssh_hostname %>'
SSH_PORT=<%= @ssh_port %>
SSH_USER='<%= @ssh_user %>'
SSH_KEY='<%= @ssh_private_key %>'
SSH_KNOWN_HOSTS='<%= @ssh_known_hosts %>'

# forwarding params
CONNECT_PORT=<%= @connect_port %>
FORWARD_HOST='<%= @forward_host %>'
FORWARD_PORT=<%= @forward_port %>

# forwarding options
# FWD -> Standard port forward using -L
# REV -> Reverse tunnel using -R
# DUAL -> Bi-directional, useful for binary log purge scripts
DIRECTION="<%= @tunnel_direction %>"

CMD="<%= @ssh_cmd %>"

start() {
    echo "Starting ssh tunnel"

    FORWARD_TYPE="-L"
    if [ "$DIRECTION" = "REV" ]
    then
      FORWARD_TYPE="-R"
    elif [ "$DIRECTION" = "DUAL" ]
	then
      FORWARD_TYPE="-R ${CONNECT_PORT}:${FORWARD_HOST}:${FORWARD_PORT} -L" 
    fi

    ARGS="-f -p ${SSH_PORT} -N $FORWARD_TYPE ${CONNECT_PORT}:${FORWARD_HOST}:${FORWARD_PORT} ${SSH_USER}@${SSH_HOST}"

    if [ -n "$SSH_KEY" ]
    then
        ARGS="-i ${SSH_KEY} ${ARGS}"
    fi

    if [ -n "$SSH_KNOWN_HOSTS" ]
    then
        ARGS="-o UserKnownHostsFile=${SSH_KNOWN_HOSTS} ${ARGS}"
    else
        ARGS="-o StrictHostKeyChecking=no ${ARGS}"
    fi

    start-stop-daemon --start --quiet --oknodo -m --pidfile ${PIDFILE} --exec ${CMD} -- ${ARGS}

}

stop() {
    echo "Stopping ssh tunnel"
    echo `ps aux | grep ssh | grep ${FORWARD_HOST} | awk '{print $2}'` > $PIDFILE
    start-stop-daemon --stop --quiet --oknodo --pidfile ${PIDFILE}
    rm ${PIDFILE}
}

case "$1" in
	    start)
	        start
	        ;;
	    stop)
	        stop
	        ;;
	    status)
	        status <%= @id %>
	        ;;
	    restart)
	        stop
	        start
	        ;;
	    *)
	        echo "Usage: <%= @id %> {start|stop|status|restart}"
	        exit 1
	        ;;
esac

exit 0
